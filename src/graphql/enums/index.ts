/* eslint-disable @typescript-eslint/no-redeclare */
export type Maybe<T> = T | null
export type InputMaybe<T> = T | null
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  Cursor: string
  Time: string
}

export type __SHOULD_NOT_USE__Color = __SHOULD_NOT_USE__Node & {
  color: Scalars['String']
  createdAt: Scalars['String']
  hex: Scalars['String']
  id: Scalars['ID']
  name: Scalars['String']
  updatedAt: Scalars['String']
}

export type __SHOULD_NOT_USE__ColorConnection = {
  edges: Maybe<Array<Maybe<__SHOULD_NOT_USE__ColorEdge>>>
  pageInfo: __SHOULD_NOT_USE__PageInfo
  totalCount: Scalars['Int']
}

export type __SHOULD_NOT_USE__ColorEdge = {
  cursor: Scalars['Cursor']
  node: Maybe<__SHOULD_NOT_USE__Color>
}

/**
 * ColorWhereInput is used for filtering Color objects.
 * Input was generated by ent.
 */
export type __SHOULD_NOT_USE__ColorWhereInput = {
  and?: InputMaybe<Array<__SHOULD_NOT_USE__ColorWhereInput>>
  /** color field predicates */
  color?: InputMaybe<Scalars['String']>
  colorContains?: InputMaybe<Scalars['String']>
  colorContainsFold?: InputMaybe<Scalars['String']>
  colorEqualFold?: InputMaybe<Scalars['String']>
  colorGT?: InputMaybe<Scalars['String']>
  colorGTE?: InputMaybe<Scalars['String']>
  colorHasPrefix?: InputMaybe<Scalars['String']>
  colorHasSuffix?: InputMaybe<Scalars['String']>
  colorIn?: InputMaybe<Array<Scalars['String']>>
  colorLT?: InputMaybe<Scalars['String']>
  colorLTE?: InputMaybe<Scalars['String']>
  colorNEQ?: InputMaybe<Scalars['String']>
  colorNotIn?: InputMaybe<Array<Scalars['String']>>
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>
  createdAtGT?: InputMaybe<Scalars['Time']>
  createdAtGTE?: InputMaybe<Scalars['Time']>
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>
  createdAtLT?: InputMaybe<Scalars['Time']>
  createdAtLTE?: InputMaybe<Scalars['Time']>
  createdAtNEQ?: InputMaybe<Scalars['Time']>
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>
  /** project_base_colors edge predicates */
  hasProjectBaseColors?: InputMaybe<Scalars['Boolean']>
  hasProjectBaseColorsWith?: InputMaybe<
    Array<__SHOULD_NOT_USE__ProjectBaseColorWhereInput>
  >
  /** project_light_colors edge predicates */
  hasProjectLightColors?: InputMaybe<Scalars['Boolean']>
  hasProjectLightColorsWith?: InputMaybe<
    Array<__SHOULD_NOT_USE__ProjectLightColorWhereInput>
  >
  /** hex field predicates */
  hex?: InputMaybe<Scalars['String']>
  hexContains?: InputMaybe<Scalars['String']>
  hexContainsFold?: InputMaybe<Scalars['String']>
  hexEqualFold?: InputMaybe<Scalars['String']>
  hexGT?: InputMaybe<Scalars['String']>
  hexGTE?: InputMaybe<Scalars['String']>
  hexHasPrefix?: InputMaybe<Scalars['String']>
  hexHasSuffix?: InputMaybe<Scalars['String']>
  hexIn?: InputMaybe<Array<Scalars['String']>>
  hexLT?: InputMaybe<Scalars['String']>
  hexLTE?: InputMaybe<Scalars['String']>
  hexNEQ?: InputMaybe<Scalars['String']>
  hexNotIn?: InputMaybe<Array<Scalars['String']>>
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>
  idGT?: InputMaybe<Scalars['ID']>
  idGTE?: InputMaybe<Scalars['ID']>
  idIn?: InputMaybe<Array<Scalars['ID']>>
  idLT?: InputMaybe<Scalars['ID']>
  idLTE?: InputMaybe<Scalars['ID']>
  idNEQ?: InputMaybe<Scalars['ID']>
  idNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>
  nameContains?: InputMaybe<Scalars['String']>
  nameContainsFold?: InputMaybe<Scalars['String']>
  nameEqualFold?: InputMaybe<Scalars['String']>
  nameGT?: InputMaybe<Scalars['String']>
  nameGTE?: InputMaybe<Scalars['String']>
  nameHasPrefix?: InputMaybe<Scalars['String']>
  nameHasSuffix?: InputMaybe<Scalars['String']>
  nameIn?: InputMaybe<Array<Scalars['String']>>
  nameLT?: InputMaybe<Scalars['String']>
  nameLTE?: InputMaybe<Scalars['String']>
  nameNEQ?: InputMaybe<Scalars['String']>
  nameNotIn?: InputMaybe<Array<Scalars['String']>>
  not?: InputMaybe<__SHOULD_NOT_USE__ColorWhereInput>
  or?: InputMaybe<Array<__SHOULD_NOT_USE__ColorWhereInput>>
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>
  updatedAtGT?: InputMaybe<Scalars['Time']>
  updatedAtGTE?: InputMaybe<Scalars['Time']>
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>
  updatedAtLT?: InputMaybe<Scalars['Time']>
  updatedAtLTE?: InputMaybe<Scalars['Time']>
  updatedAtNEQ?: InputMaybe<Scalars['Time']>
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>
}

export type __SHOULD_NOT_USE__CreateColorInput = {
  color: Scalars['String']
  hex: Scalars['String']
  name: Scalars['String']
}

export type __SHOULD_NOT_USE__CreateIconInput = {
  icon: Scalars['String']
  name: Scalars['String']
}

export type __SHOULD_NOT_USE__CreateProjectBaseColorInput = {
  colorId: Scalars['ID']
}

export type __SHOULD_NOT_USE__CreateProjectInput = {
  createdBy: Scalars['ID']
  description?: InputMaybe<__SHOULD_NOT_USE__EditorDescriptionInput>
  descriptionTitle?: InputMaybe<Scalars['String']>
  dueDate?: InputMaybe<Scalars['Time']>
  iconId?: InputMaybe<Scalars['ID']>
  name: Scalars['String']
  projectBaseColorId?: InputMaybe<Scalars['ID']>
  projectLightColorId?: InputMaybe<Scalars['ID']>
  workspaceId: Scalars['ID']
}

export type __SHOULD_NOT_USE__CreateProjectLightColorInput = {
  colorId: Scalars['ID']
}

export type __SHOULD_NOT_USE__CreateProjectTeammateInput = {
  isOwner: Scalars['Boolean']
  projectId: Scalars['ID']
  role: Scalars['String']
  teammateId: Scalars['ID']
}

export type __SHOULD_NOT_USE__CreateTeammateInput = {
  email: Scalars['String']
  image: Scalars['String']
  name: Scalars['String']
}

export type __SHOULD_NOT_USE__CreateTestTodoInput = {
  name: Scalars['String']
  priority: Scalars['Int']
  status?: InputMaybe<TestTodoStatus>
  testUserID: Scalars['ID']
}

export type __SHOULD_NOT_USE__CreateTestUserInput = {
  age: Scalars['Int']
  name: Scalars['String']
  profile: __SHOULD_NOT_USE__TestUserProfileInput
}

export type __SHOULD_NOT_USE__CreateWorkspaceInput = {
  createdBy: Scalars['ID']
  description?: InputMaybe<__SHOULD_NOT_USE__EditorDescriptionInput>
  name: Scalars['String']
}

export type __SHOULD_NOT_USE__EditorDescription = {
  content: Array<Maybe<__SHOULD_NOT_USE__EditorDescriptionContent>>
  type: Maybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__EditorDescriptionContent = {
  content: Maybe<
    Array<Maybe<__SHOULD_NOT_USE__EditorDescriptionContentContent>>
  >
  type: Maybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__EditorDescriptionContentContent = {
  attrs: Maybe<__SHOULD_NOT_USE__EditorDescriptionContentContentAttrs>
  text: Maybe<Scalars['String']>
  type: Maybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__EditorDescriptionContentContentAttrs = {
  mentionId: Maybe<Scalars['String']>
  mentionType: Maybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__EditorDescriptionContentContentAttrsInput = {
  mentionId?: InputMaybe<Scalars['String']>
  mentionType?: InputMaybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__EditorDescriptionContentContentInput = {
  attrs?: InputMaybe<__SHOULD_NOT_USE__EditorDescriptionContentContentAttrsInput>
  text?: InputMaybe<Scalars['String']>
  type?: InputMaybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__EditorDescriptionContentInput = {
  content?: InputMaybe<
    Array<InputMaybe<__SHOULD_NOT_USE__EditorDescriptionContentContentInput>>
  >
  type?: InputMaybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__EditorDescriptionInput = {
  content?: InputMaybe<
    Array<InputMaybe<__SHOULD_NOT_USE__EditorDescriptionContentInput>>
  >
  type?: InputMaybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__Icon = __SHOULD_NOT_USE__Node & {
  createdAt: Scalars['String']
  icon: Scalars['String']
  id: Scalars['ID']
  name: Scalars['String']
  updatedAt: Scalars['String']
}

export type __SHOULD_NOT_USE__IconConnection = {
  edges: Maybe<Array<Maybe<__SHOULD_NOT_USE__IconEdge>>>
  pageInfo: __SHOULD_NOT_USE__PageInfo
  totalCount: Scalars['Int']
}

export type __SHOULD_NOT_USE__IconEdge = {
  cursor: Scalars['Cursor']
  node: Maybe<__SHOULD_NOT_USE__Icon>
}

/**
 * IconWhereInput is used for filtering Icon objects.
 * Input was generated by ent.
 */
export type __SHOULD_NOT_USE__IconWhereInput = {
  and?: InputMaybe<Array<__SHOULD_NOT_USE__IconWhereInput>>
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>
  createdAtGT?: InputMaybe<Scalars['Time']>
  createdAtGTE?: InputMaybe<Scalars['Time']>
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>
  createdAtLT?: InputMaybe<Scalars['Time']>
  createdAtLTE?: InputMaybe<Scalars['Time']>
  createdAtNEQ?: InputMaybe<Scalars['Time']>
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>
  /** projects edge predicates */
  hasProjects?: InputMaybe<Scalars['Boolean']>
  hasProjectsWith?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectWhereInput>>
  /** icon field predicates */
  icon?: InputMaybe<Scalars['String']>
  iconContains?: InputMaybe<Scalars['String']>
  iconContainsFold?: InputMaybe<Scalars['String']>
  iconEqualFold?: InputMaybe<Scalars['String']>
  iconGT?: InputMaybe<Scalars['String']>
  iconGTE?: InputMaybe<Scalars['String']>
  iconHasPrefix?: InputMaybe<Scalars['String']>
  iconHasSuffix?: InputMaybe<Scalars['String']>
  iconIn?: InputMaybe<Array<Scalars['String']>>
  iconLT?: InputMaybe<Scalars['String']>
  iconLTE?: InputMaybe<Scalars['String']>
  iconNEQ?: InputMaybe<Scalars['String']>
  iconNotIn?: InputMaybe<Array<Scalars['String']>>
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>
  idGT?: InputMaybe<Scalars['ID']>
  idGTE?: InputMaybe<Scalars['ID']>
  idIn?: InputMaybe<Array<Scalars['ID']>>
  idLT?: InputMaybe<Scalars['ID']>
  idLTE?: InputMaybe<Scalars['ID']>
  idNEQ?: InputMaybe<Scalars['ID']>
  idNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>
  nameContains?: InputMaybe<Scalars['String']>
  nameContainsFold?: InputMaybe<Scalars['String']>
  nameEqualFold?: InputMaybe<Scalars['String']>
  nameGT?: InputMaybe<Scalars['String']>
  nameGTE?: InputMaybe<Scalars['String']>
  nameHasPrefix?: InputMaybe<Scalars['String']>
  nameHasSuffix?: InputMaybe<Scalars['String']>
  nameIn?: InputMaybe<Array<Scalars['String']>>
  nameLT?: InputMaybe<Scalars['String']>
  nameLTE?: InputMaybe<Scalars['String']>
  nameNEQ?: InputMaybe<Scalars['String']>
  nameNotIn?: InputMaybe<Array<Scalars['String']>>
  not?: InputMaybe<__SHOULD_NOT_USE__IconWhereInput>
  or?: InputMaybe<Array<__SHOULD_NOT_USE__IconWhereInput>>
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>
  updatedAtGT?: InputMaybe<Scalars['Time']>
  updatedAtGTE?: InputMaybe<Scalars['Time']>
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>
  updatedAtLT?: InputMaybe<Scalars['Time']>
  updatedAtLTE?: InputMaybe<Scalars['Time']>
  updatedAtNEQ?: InputMaybe<Scalars['Time']>
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>
}

export type __SHOULD_NOT_USE__Mutation = {
  createColor: __SHOULD_NOT_USE__Color
  createIcon: __SHOULD_NOT_USE__Icon
  createProject: __SHOULD_NOT_USE__Project
  createProjectBaseColor: __SHOULD_NOT_USE__ProjectBaseColor
  createProjectLightColor: __SHOULD_NOT_USE__ProjectLightColor
  createProjectTeammate: __SHOULD_NOT_USE__ProjectTeammate
  createTeammate: __SHOULD_NOT_USE__Teammate
  createTestTodo: __SHOULD_NOT_USE__TestTodo
  createTestUser: __SHOULD_NOT_USE__TestUser
  createTestUserAndTodo: __SHOULD_NOT_USE__TestUser
  createWorkspace: __SHOULD_NOT_USE__Workspace
  updateColor: __SHOULD_NOT_USE__Color
  updateIcon: __SHOULD_NOT_USE__Icon
  updateProject: __SHOULD_NOT_USE__Project
  updateProjectBaseColor: __SHOULD_NOT_USE__ProjectBaseColor
  updateProjectLightColor: __SHOULD_NOT_USE__ProjectLightColor
  updateProjectTeammate: __SHOULD_NOT_USE__ProjectTeammate
  updateTeammate: __SHOULD_NOT_USE__Teammate
  updateTestTodo: __SHOULD_NOT_USE__TestTodo
  updateTestUser: __SHOULD_NOT_USE__TestUser
  updateWorkspace: __SHOULD_NOT_USE__Workspace
}

export type __SHOULD_NOT_USE__MutationCreateColorArgs = {
  input: __SHOULD_NOT_USE__CreateColorInput
}

export type __SHOULD_NOT_USE__MutationCreateIconArgs = {
  input: __SHOULD_NOT_USE__CreateIconInput
}

export type __SHOULD_NOT_USE__MutationCreateProjectArgs = {
  input: __SHOULD_NOT_USE__CreateProjectInput
}

export type __SHOULD_NOT_USE__MutationCreateProjectBaseColorArgs = {
  input: __SHOULD_NOT_USE__CreateProjectBaseColorInput
}

export type __SHOULD_NOT_USE__MutationCreateProjectLightColorArgs = {
  input: __SHOULD_NOT_USE__CreateProjectLightColorInput
}

export type __SHOULD_NOT_USE__MutationCreateProjectTeammateArgs = {
  input: __SHOULD_NOT_USE__CreateProjectTeammateInput
}

export type __SHOULD_NOT_USE__MutationCreateTeammateArgs = {
  input: __SHOULD_NOT_USE__CreateTeammateInput
}

export type __SHOULD_NOT_USE__MutationCreateTestTodoArgs = {
  input: __SHOULD_NOT_USE__CreateTestTodoInput
}

export type __SHOULD_NOT_USE__MutationCreateTestUserArgs = {
  input: __SHOULD_NOT_USE__CreateTestUserInput
}

export type __SHOULD_NOT_USE__MutationCreateTestUserAndTodoArgs = {
  input: __SHOULD_NOT_USE__CreateTestUserInput
}

export type __SHOULD_NOT_USE__MutationCreateWorkspaceArgs = {
  input: __SHOULD_NOT_USE__CreateWorkspaceInput
}

export type __SHOULD_NOT_USE__MutationUpdateColorArgs = {
  input: __SHOULD_NOT_USE__UpdateColorInput
}

export type __SHOULD_NOT_USE__MutationUpdateIconArgs = {
  input: __SHOULD_NOT_USE__UpdateIconInput
}

export type __SHOULD_NOT_USE__MutationUpdateProjectArgs = {
  input: __SHOULD_NOT_USE__UpdateProjectInput
}

export type __SHOULD_NOT_USE__MutationUpdateProjectBaseColorArgs = {
  input: __SHOULD_NOT_USE__UpdateProjectBaseColorInput
}

export type __SHOULD_NOT_USE__MutationUpdateProjectLightColorArgs = {
  input: __SHOULD_NOT_USE__UpdateProjectLightColorInput
}

export type __SHOULD_NOT_USE__MutationUpdateProjectTeammateArgs = {
  input: __SHOULD_NOT_USE__UpdateProjectTeammateInput
}

export type __SHOULD_NOT_USE__MutationUpdateTeammateArgs = {
  input: __SHOULD_NOT_USE__UpdateTeammateInput
}

export type __SHOULD_NOT_USE__MutationUpdateTestTodoArgs = {
  input: __SHOULD_NOT_USE__UpdateTestTodoInput
}

export type __SHOULD_NOT_USE__MutationUpdateTestUserArgs = {
  input: __SHOULD_NOT_USE__UpdateTestUserInput
}

export type __SHOULD_NOT_USE__MutationUpdateWorkspaceArgs = {
  input: __SHOULD_NOT_USE__UpdateWorkspaceInput
}

export type __SHOULD_NOT_USE__Node = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__PageInfo = {
  endCursor: Maybe<Scalars['Cursor']>
  hasNextPage: Scalars['Boolean']
  hasPreviousPage: Scalars['Boolean']
  startCursor: Maybe<Scalars['Cursor']>
}

export type __SHOULD_NOT_USE__Project = __SHOULD_NOT_USE__Node & {
  createdAt: Scalars['String']
  createdBy: Scalars['ID']
  description: __SHOULD_NOT_USE__EditorDescription
  descriptionTitle: Scalars['String']
  dueDate: Scalars['String']
  icon: __SHOULD_NOT_USE__Icon
  id: Scalars['ID']
  name: Scalars['String']
  projectBaseColor: __SHOULD_NOT_USE__ProjectBaseColor
  projectBaseColorId: Scalars['ID']
  projectLightColor: __SHOULD_NOT_USE__ProjectLightColor
  projectLightColorId: Scalars['ID']
  projectTeammates: Array<__SHOULD_NOT_USE__ProjectTeammate>
  teammateIds: Array<Scalars['String']>
  updatedAt: Scalars['String']
  workspaceId: Scalars['ID']
}

export type __SHOULD_NOT_USE__ProjectBaseColor = __SHOULD_NOT_USE__Node & {
  color: __SHOULD_NOT_USE__Color
  createdAt: Scalars['String']
  id: Scalars['ID']
  updatedAt: Scalars['String']
}

export type __SHOULD_NOT_USE__ProjectBaseColorConnection = {
  edges: Maybe<Array<Maybe<__SHOULD_NOT_USE__ProjectBaseColorEdge>>>
  pageInfo: __SHOULD_NOT_USE__PageInfo
  totalCount: Scalars['Int']
}

export type __SHOULD_NOT_USE__ProjectBaseColorEdge = {
  cursor: Scalars['Cursor']
  node: Maybe<__SHOULD_NOT_USE__ProjectBaseColor>
}

/**
 * ProjectBaseColorWhereInput is used for filtering ProjectBaseColor objects.
 * Input was generated by ent.
 */
export type __SHOULD_NOT_USE__ProjectBaseColorWhereInput = {
  and?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectBaseColorWhereInput>>
  /** color_id field predicates */
  colorID?: InputMaybe<Scalars['ID']>
  colorIDContains?: InputMaybe<Scalars['ID']>
  colorIDContainsFold?: InputMaybe<Scalars['ID']>
  colorIDEqualFold?: InputMaybe<Scalars['ID']>
  colorIDGT?: InputMaybe<Scalars['ID']>
  colorIDGTE?: InputMaybe<Scalars['ID']>
  colorIDHasPrefix?: InputMaybe<Scalars['ID']>
  colorIDHasSuffix?: InputMaybe<Scalars['ID']>
  colorIDIn?: InputMaybe<Array<Scalars['ID']>>
  colorIDLT?: InputMaybe<Scalars['ID']>
  colorIDLTE?: InputMaybe<Scalars['ID']>
  colorIDNEQ?: InputMaybe<Scalars['ID']>
  colorIDNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>
  createdAtGT?: InputMaybe<Scalars['Time']>
  createdAtGTE?: InputMaybe<Scalars['Time']>
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>
  createdAtLT?: InputMaybe<Scalars['Time']>
  createdAtLTE?: InputMaybe<Scalars['Time']>
  createdAtNEQ?: InputMaybe<Scalars['Time']>
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>
  /** color edge predicates */
  hasColor?: InputMaybe<Scalars['Boolean']>
  hasColorWith?: InputMaybe<Array<__SHOULD_NOT_USE__ColorWhereInput>>
  /** projects edge predicates */
  hasProjects?: InputMaybe<Scalars['Boolean']>
  hasProjectsWith?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectWhereInput>>
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>
  idGT?: InputMaybe<Scalars['ID']>
  idGTE?: InputMaybe<Scalars['ID']>
  idIn?: InputMaybe<Array<Scalars['ID']>>
  idLT?: InputMaybe<Scalars['ID']>
  idLTE?: InputMaybe<Scalars['ID']>
  idNEQ?: InputMaybe<Scalars['ID']>
  idNotIn?: InputMaybe<Array<Scalars['ID']>>
  not?: InputMaybe<__SHOULD_NOT_USE__ProjectBaseColorWhereInput>
  or?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectBaseColorWhereInput>>
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>
  updatedAtGT?: InputMaybe<Scalars['Time']>
  updatedAtGTE?: InputMaybe<Scalars['Time']>
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>
  updatedAtLT?: InputMaybe<Scalars['Time']>
  updatedAtLTE?: InputMaybe<Scalars['Time']>
  updatedAtNEQ?: InputMaybe<Scalars['Time']>
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>
}

export type __SHOULD_NOT_USE__ProjectConnection = {
  edges: Maybe<Array<Maybe<__SHOULD_NOT_USE__ProjectEdge>>>
  pageInfo: __SHOULD_NOT_USE__PageInfo
  totalCount: Scalars['Int']
}

export type __SHOULD_NOT_USE__ProjectEdge = {
  cursor: Scalars['Cursor']
  node: Maybe<__SHOULD_NOT_USE__Project>
}

export type __SHOULD_NOT_USE__ProjectLightColor = __SHOULD_NOT_USE__Node & {
  color: __SHOULD_NOT_USE__Color
  createdAt: Scalars['String']
  id: Scalars['ID']
  updatedAt: Scalars['String']
}

export type __SHOULD_NOT_USE__ProjectLightColorConnection = {
  edges: Maybe<Array<Maybe<__SHOULD_NOT_USE__ProjectLightColorEdge>>>
  pageInfo: __SHOULD_NOT_USE__PageInfo
  totalCount: Scalars['Int']
}

export type __SHOULD_NOT_USE__ProjectLightColorEdge = {
  cursor: Scalars['Cursor']
  node: Maybe<__SHOULD_NOT_USE__ProjectLightColor>
}

/**
 * ProjectLightColorWhereInput is used for filtering ProjectLightColor objects.
 * Input was generated by ent.
 */
export type __SHOULD_NOT_USE__ProjectLightColorWhereInput = {
  and?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectLightColorWhereInput>>
  /** color_id field predicates */
  colorID?: InputMaybe<Scalars['ID']>
  colorIDContains?: InputMaybe<Scalars['ID']>
  colorIDContainsFold?: InputMaybe<Scalars['ID']>
  colorIDEqualFold?: InputMaybe<Scalars['ID']>
  colorIDGT?: InputMaybe<Scalars['ID']>
  colorIDGTE?: InputMaybe<Scalars['ID']>
  colorIDHasPrefix?: InputMaybe<Scalars['ID']>
  colorIDHasSuffix?: InputMaybe<Scalars['ID']>
  colorIDIn?: InputMaybe<Array<Scalars['ID']>>
  colorIDLT?: InputMaybe<Scalars['ID']>
  colorIDLTE?: InputMaybe<Scalars['ID']>
  colorIDNEQ?: InputMaybe<Scalars['ID']>
  colorIDNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>
  createdAtGT?: InputMaybe<Scalars['Time']>
  createdAtGTE?: InputMaybe<Scalars['Time']>
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>
  createdAtLT?: InputMaybe<Scalars['Time']>
  createdAtLTE?: InputMaybe<Scalars['Time']>
  createdAtNEQ?: InputMaybe<Scalars['Time']>
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>
  /** color edge predicates */
  hasColor?: InputMaybe<Scalars['Boolean']>
  hasColorWith?: InputMaybe<Array<__SHOULD_NOT_USE__ColorWhereInput>>
  /** projects edge predicates */
  hasProjects?: InputMaybe<Scalars['Boolean']>
  hasProjectsWith?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectWhereInput>>
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>
  idGT?: InputMaybe<Scalars['ID']>
  idGTE?: InputMaybe<Scalars['ID']>
  idIn?: InputMaybe<Array<Scalars['ID']>>
  idLT?: InputMaybe<Scalars['ID']>
  idLTE?: InputMaybe<Scalars['ID']>
  idNEQ?: InputMaybe<Scalars['ID']>
  idNotIn?: InputMaybe<Array<Scalars['ID']>>
  not?: InputMaybe<__SHOULD_NOT_USE__ProjectLightColorWhereInput>
  or?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectLightColorWhereInput>>
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>
  updatedAtGT?: InputMaybe<Scalars['Time']>
  updatedAtGTE?: InputMaybe<Scalars['Time']>
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>
  updatedAtLT?: InputMaybe<Scalars['Time']>
  updatedAtLTE?: InputMaybe<Scalars['Time']>
  updatedAtNEQ?: InputMaybe<Scalars['Time']>
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>
}

export type __SHOULD_NOT_USE__ProjectTeammate = __SHOULD_NOT_USE__Node & {
  createdAt: Scalars['String']
  id: Scalars['ID']
  isOwner: Scalars['Boolean']
  project: __SHOULD_NOT_USE__Project
  projectId: Scalars['ID']
  role: Scalars['String']
  teammate: __SHOULD_NOT_USE__Teammate
  teammateId: Scalars['ID']
  updatedAt: Scalars['String']
}

export type __SHOULD_NOT_USE__ProjectTeammateConnection = {
  edges: Maybe<Array<Maybe<__SHOULD_NOT_USE__ProjectTeammateEdge>>>
  pageInfo: __SHOULD_NOT_USE__PageInfo
  totalCount: Scalars['Int']
}

export type __SHOULD_NOT_USE__ProjectTeammateEdge = {
  cursor: Scalars['Cursor']
  node: Maybe<__SHOULD_NOT_USE__ProjectTeammate>
}

/**
 * ProjectTeammateWhereInput is used for filtering ProjectTeammate objects.
 * Input was generated by ent.
 */
export type __SHOULD_NOT_USE__ProjectTeammateWhereInput = {
  and?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectTeammateWhereInput>>
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>
  createdAtGT?: InputMaybe<Scalars['Time']>
  createdAtGTE?: InputMaybe<Scalars['Time']>
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>
  createdAtLT?: InputMaybe<Scalars['Time']>
  createdAtLTE?: InputMaybe<Scalars['Time']>
  createdAtNEQ?: InputMaybe<Scalars['Time']>
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>
  /** project edge predicates */
  hasProject?: InputMaybe<Scalars['Boolean']>
  hasProjectWith?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectWhereInput>>
  /** teammate edge predicates */
  hasTeammate?: InputMaybe<Scalars['Boolean']>
  hasTeammateWith?: InputMaybe<Array<__SHOULD_NOT_USE__TeammateWhereInput>>
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>
  idGT?: InputMaybe<Scalars['ID']>
  idGTE?: InputMaybe<Scalars['ID']>
  idIn?: InputMaybe<Array<Scalars['ID']>>
  idLT?: InputMaybe<Scalars['ID']>
  idLTE?: InputMaybe<Scalars['ID']>
  idNEQ?: InputMaybe<Scalars['ID']>
  idNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** is_owner field predicates */
  isOwner?: InputMaybe<Scalars['Boolean']>
  isOwnerNEQ?: InputMaybe<Scalars['Boolean']>
  not?: InputMaybe<__SHOULD_NOT_USE__ProjectTeammateWhereInput>
  or?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectTeammateWhereInput>>
  /** project_id field predicates */
  projectID?: InputMaybe<Scalars['ID']>
  projectIDContains?: InputMaybe<Scalars['ID']>
  projectIDContainsFold?: InputMaybe<Scalars['ID']>
  projectIDEqualFold?: InputMaybe<Scalars['ID']>
  projectIDGT?: InputMaybe<Scalars['ID']>
  projectIDGTE?: InputMaybe<Scalars['ID']>
  projectIDHasPrefix?: InputMaybe<Scalars['ID']>
  projectIDHasSuffix?: InputMaybe<Scalars['ID']>
  projectIDIn?: InputMaybe<Array<Scalars['ID']>>
  projectIDLT?: InputMaybe<Scalars['ID']>
  projectIDLTE?: InputMaybe<Scalars['ID']>
  projectIDNEQ?: InputMaybe<Scalars['ID']>
  projectIDNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** role field predicates */
  role?: InputMaybe<Scalars['String']>
  roleContains?: InputMaybe<Scalars['String']>
  roleContainsFold?: InputMaybe<Scalars['String']>
  roleEqualFold?: InputMaybe<Scalars['String']>
  roleGT?: InputMaybe<Scalars['String']>
  roleGTE?: InputMaybe<Scalars['String']>
  roleHasPrefix?: InputMaybe<Scalars['String']>
  roleHasSuffix?: InputMaybe<Scalars['String']>
  roleIn?: InputMaybe<Array<Scalars['String']>>
  roleLT?: InputMaybe<Scalars['String']>
  roleLTE?: InputMaybe<Scalars['String']>
  roleNEQ?: InputMaybe<Scalars['String']>
  roleNotIn?: InputMaybe<Array<Scalars['String']>>
  /** teammate_id field predicates */
  teammateID?: InputMaybe<Scalars['ID']>
  teammateIDContains?: InputMaybe<Scalars['ID']>
  teammateIDContainsFold?: InputMaybe<Scalars['ID']>
  teammateIDEqualFold?: InputMaybe<Scalars['ID']>
  teammateIDGT?: InputMaybe<Scalars['ID']>
  teammateIDGTE?: InputMaybe<Scalars['ID']>
  teammateIDHasPrefix?: InputMaybe<Scalars['ID']>
  teammateIDHasSuffix?: InputMaybe<Scalars['ID']>
  teammateIDIn?: InputMaybe<Array<Scalars['ID']>>
  teammateIDLT?: InputMaybe<Scalars['ID']>
  teammateIDLTE?: InputMaybe<Scalars['ID']>
  teammateIDNEQ?: InputMaybe<Scalars['ID']>
  teammateIDNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>
  updatedAtGT?: InputMaybe<Scalars['Time']>
  updatedAtGTE?: InputMaybe<Scalars['Time']>
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>
  updatedAtLT?: InputMaybe<Scalars['Time']>
  updatedAtLTE?: InputMaybe<Scalars['Time']>
  updatedAtNEQ?: InputMaybe<Scalars['Time']>
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>
}

/**
 * ProjectWhereInput is used for filtering Project objects.
 * Input was generated by ent.
 */
export type __SHOULD_NOT_USE__ProjectWhereInput = {
  and?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectWhereInput>>
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>
  createdAtGT?: InputMaybe<Scalars['Time']>
  createdAtGTE?: InputMaybe<Scalars['Time']>
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>
  createdAtLT?: InputMaybe<Scalars['Time']>
  createdAtLTE?: InputMaybe<Scalars['Time']>
  createdAtNEQ?: InputMaybe<Scalars['Time']>
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>
  /** created_by field predicates */
  createdBy?: InputMaybe<Scalars['ID']>
  createdByContains?: InputMaybe<Scalars['ID']>
  createdByContainsFold?: InputMaybe<Scalars['ID']>
  createdByEqualFold?: InputMaybe<Scalars['ID']>
  createdByGT?: InputMaybe<Scalars['ID']>
  createdByGTE?: InputMaybe<Scalars['ID']>
  createdByHasPrefix?: InputMaybe<Scalars['ID']>
  createdByHasSuffix?: InputMaybe<Scalars['ID']>
  createdByIn?: InputMaybe<Array<Scalars['ID']>>
  createdByLT?: InputMaybe<Scalars['ID']>
  createdByLTE?: InputMaybe<Scalars['ID']>
  createdByNEQ?: InputMaybe<Scalars['ID']>
  createdByNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** description_title field predicates */
  descriptionTitle?: InputMaybe<Scalars['String']>
  descriptionTitleContains?: InputMaybe<Scalars['String']>
  descriptionTitleContainsFold?: InputMaybe<Scalars['String']>
  descriptionTitleEqualFold?: InputMaybe<Scalars['String']>
  descriptionTitleGT?: InputMaybe<Scalars['String']>
  descriptionTitleGTE?: InputMaybe<Scalars['String']>
  descriptionTitleHasPrefix?: InputMaybe<Scalars['String']>
  descriptionTitleHasSuffix?: InputMaybe<Scalars['String']>
  descriptionTitleIn?: InputMaybe<Array<Scalars['String']>>
  descriptionTitleLT?: InputMaybe<Scalars['String']>
  descriptionTitleLTE?: InputMaybe<Scalars['String']>
  descriptionTitleNEQ?: InputMaybe<Scalars['String']>
  descriptionTitleNotIn?: InputMaybe<Array<Scalars['String']>>
  /** due_date field predicates */
  dueDate?: InputMaybe<Scalars['Time']>
  dueDateGT?: InputMaybe<Scalars['Time']>
  dueDateGTE?: InputMaybe<Scalars['Time']>
  dueDateIn?: InputMaybe<Array<Scalars['Time']>>
  dueDateLT?: InputMaybe<Scalars['Time']>
  dueDateLTE?: InputMaybe<Scalars['Time']>
  dueDateNEQ?: InputMaybe<Scalars['Time']>
  dueDateNotIn?: InputMaybe<Array<Scalars['Time']>>
  /** icon edge predicates */
  hasIcon?: InputMaybe<Scalars['Boolean']>
  hasIconWith?: InputMaybe<Array<__SHOULD_NOT_USE__IconWhereInput>>
  /** project_base_color edge predicates */
  hasProjectBaseColor?: InputMaybe<Scalars['Boolean']>
  hasProjectBaseColorWith?: InputMaybe<
    Array<__SHOULD_NOT_USE__ProjectBaseColorWhereInput>
  >
  /** project_light_color edge predicates */
  hasProjectLightColor?: InputMaybe<Scalars['Boolean']>
  hasProjectLightColorWith?: InputMaybe<
    Array<__SHOULD_NOT_USE__ProjectLightColorWhereInput>
  >
  /** project_teammates edge predicates */
  hasProjectTeammates?: InputMaybe<Scalars['Boolean']>
  hasProjectTeammatesWith?: InputMaybe<
    Array<__SHOULD_NOT_USE__ProjectTeammateWhereInput>
  >
  /** teammate edge predicates */
  hasTeammate?: InputMaybe<Scalars['Boolean']>
  hasTeammateWith?: InputMaybe<Array<__SHOULD_NOT_USE__TeammateWhereInput>>
  /** workspace edge predicates */
  hasWorkspace?: InputMaybe<Scalars['Boolean']>
  hasWorkspaceWith?: InputMaybe<Array<__SHOULD_NOT_USE__WorkspaceWhereInput>>
  /** icon_id field predicates */
  iconID?: InputMaybe<Scalars['ID']>
  iconIDContains?: InputMaybe<Scalars['ID']>
  iconIDContainsFold?: InputMaybe<Scalars['ID']>
  iconIDEqualFold?: InputMaybe<Scalars['ID']>
  iconIDGT?: InputMaybe<Scalars['ID']>
  iconIDGTE?: InputMaybe<Scalars['ID']>
  iconIDHasPrefix?: InputMaybe<Scalars['ID']>
  iconIDHasSuffix?: InputMaybe<Scalars['ID']>
  iconIDIn?: InputMaybe<Array<Scalars['ID']>>
  iconIDLT?: InputMaybe<Scalars['ID']>
  iconIDLTE?: InputMaybe<Scalars['ID']>
  iconIDNEQ?: InputMaybe<Scalars['ID']>
  iconIDNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>
  idGT?: InputMaybe<Scalars['ID']>
  idGTE?: InputMaybe<Scalars['ID']>
  idIn?: InputMaybe<Array<Scalars['ID']>>
  idLT?: InputMaybe<Scalars['ID']>
  idLTE?: InputMaybe<Scalars['ID']>
  idNEQ?: InputMaybe<Scalars['ID']>
  idNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>
  nameContains?: InputMaybe<Scalars['String']>
  nameContainsFold?: InputMaybe<Scalars['String']>
  nameEqualFold?: InputMaybe<Scalars['String']>
  nameGT?: InputMaybe<Scalars['String']>
  nameGTE?: InputMaybe<Scalars['String']>
  nameHasPrefix?: InputMaybe<Scalars['String']>
  nameHasSuffix?: InputMaybe<Scalars['String']>
  nameIn?: InputMaybe<Array<Scalars['String']>>
  nameLT?: InputMaybe<Scalars['String']>
  nameLTE?: InputMaybe<Scalars['String']>
  nameNEQ?: InputMaybe<Scalars['String']>
  nameNotIn?: InputMaybe<Array<Scalars['String']>>
  not?: InputMaybe<__SHOULD_NOT_USE__ProjectWhereInput>
  or?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectWhereInput>>
  /** project_base_color_id field predicates */
  projectBaseColorID?: InputMaybe<Scalars['ID']>
  projectBaseColorIDContains?: InputMaybe<Scalars['ID']>
  projectBaseColorIDContainsFold?: InputMaybe<Scalars['ID']>
  projectBaseColorIDEqualFold?: InputMaybe<Scalars['ID']>
  projectBaseColorIDGT?: InputMaybe<Scalars['ID']>
  projectBaseColorIDGTE?: InputMaybe<Scalars['ID']>
  projectBaseColorIDHasPrefix?: InputMaybe<Scalars['ID']>
  projectBaseColorIDHasSuffix?: InputMaybe<Scalars['ID']>
  projectBaseColorIDIn?: InputMaybe<Array<Scalars['ID']>>
  projectBaseColorIDLT?: InputMaybe<Scalars['ID']>
  projectBaseColorIDLTE?: InputMaybe<Scalars['ID']>
  projectBaseColorIDNEQ?: InputMaybe<Scalars['ID']>
  projectBaseColorIDNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** project_light_color_id field predicates */
  projectLightColorID?: InputMaybe<Scalars['ID']>
  projectLightColorIDContains?: InputMaybe<Scalars['ID']>
  projectLightColorIDContainsFold?: InputMaybe<Scalars['ID']>
  projectLightColorIDEqualFold?: InputMaybe<Scalars['ID']>
  projectLightColorIDGT?: InputMaybe<Scalars['ID']>
  projectLightColorIDGTE?: InputMaybe<Scalars['ID']>
  projectLightColorIDHasPrefix?: InputMaybe<Scalars['ID']>
  projectLightColorIDHasSuffix?: InputMaybe<Scalars['ID']>
  projectLightColorIDIn?: InputMaybe<Array<Scalars['ID']>>
  projectLightColorIDLT?: InputMaybe<Scalars['ID']>
  projectLightColorIDLTE?: InputMaybe<Scalars['ID']>
  projectLightColorIDNEQ?: InputMaybe<Scalars['ID']>
  projectLightColorIDNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>
  updatedAtGT?: InputMaybe<Scalars['Time']>
  updatedAtGTE?: InputMaybe<Scalars['Time']>
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>
  updatedAtLT?: InputMaybe<Scalars['Time']>
  updatedAtLTE?: InputMaybe<Scalars['Time']>
  updatedAtNEQ?: InputMaybe<Scalars['Time']>
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>
  /** workspace_id field predicates */
  workspaceID?: InputMaybe<Scalars['ID']>
  workspaceIDContains?: InputMaybe<Scalars['ID']>
  workspaceIDContainsFold?: InputMaybe<Scalars['ID']>
  workspaceIDEqualFold?: InputMaybe<Scalars['ID']>
  workspaceIDGT?: InputMaybe<Scalars['ID']>
  workspaceIDGTE?: InputMaybe<Scalars['ID']>
  workspaceIDHasPrefix?: InputMaybe<Scalars['ID']>
  workspaceIDHasSuffix?: InputMaybe<Scalars['ID']>
  workspaceIDIn?: InputMaybe<Array<Scalars['ID']>>
  workspaceIDLT?: InputMaybe<Scalars['ID']>
  workspaceIDLTE?: InputMaybe<Scalars['ID']>
  workspaceIDNEQ?: InputMaybe<Scalars['ID']>
  workspaceIDNotIn?: InputMaybe<Array<Scalars['ID']>>
}

export type __SHOULD_NOT_USE__Query = {
  color: Maybe<__SHOULD_NOT_USE__Color>
  colors: Maybe<__SHOULD_NOT_USE__ColorConnection>
  icon: Maybe<__SHOULD_NOT_USE__Icon>
  icons: Maybe<__SHOULD_NOT_USE__IconConnection>
  node: Maybe<__SHOULD_NOT_USE__Node>
  nodes: Array<Maybe<__SHOULD_NOT_USE__Node>>
  project: Maybe<__SHOULD_NOT_USE__Project>
  projectBaseColor: Maybe<__SHOULD_NOT_USE__ProjectBaseColor>
  projectBaseColors: Maybe<__SHOULD_NOT_USE__ProjectBaseColorConnection>
  projectLightColor: Maybe<__SHOULD_NOT_USE__ProjectLightColor>
  projectLightColors: Maybe<__SHOULD_NOT_USE__ProjectLightColorConnection>
  projectTeammate: Maybe<__SHOULD_NOT_USE__ProjectTeammate>
  projectTeammates: Maybe<__SHOULD_NOT_USE__ProjectTeammateConnection>
  projects: Maybe<__SHOULD_NOT_USE__ProjectConnection>
  teammate: Maybe<__SHOULD_NOT_USE__Teammate>
  teammates: Maybe<__SHOULD_NOT_USE__TeammateConnection>
  testTodo: Maybe<__SHOULD_NOT_USE__TestTodo>
  testTodos: Array<__SHOULD_NOT_USE__TestTodo>
  testUser: Maybe<__SHOULD_NOT_USE__TestUser>
  testUsers: Maybe<__SHOULD_NOT_USE__TestUserConnection>
  workspace: Maybe<__SHOULD_NOT_USE__Workspace>
  workspaces: Maybe<__SHOULD_NOT_USE__WorkspaceConnection>
}

export type __SHOULD_NOT_USE__QueryColorArgs = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__QueryColorsArgs = {
  after?: InputMaybe<Scalars['Cursor']>
  before?: InputMaybe<Scalars['Cursor']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  where?: InputMaybe<__SHOULD_NOT_USE__ColorWhereInput>
}

export type __SHOULD_NOT_USE__QueryIconArgs = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__QueryIconsArgs = {
  after?: InputMaybe<Scalars['Cursor']>
  before?: InputMaybe<Scalars['Cursor']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  where?: InputMaybe<__SHOULD_NOT_USE__IconWhereInput>
}

export type __SHOULD_NOT_USE__QueryNodeArgs = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__QueryNodesArgs = {
  ids: Array<Scalars['ID']>
}

export type __SHOULD_NOT_USE__QueryProjectArgs = {
  where?: InputMaybe<__SHOULD_NOT_USE__ProjectWhereInput>
}

export type __SHOULD_NOT_USE__QueryProjectBaseColorArgs = {
  where?: InputMaybe<__SHOULD_NOT_USE__ProjectBaseColorWhereInput>
}

export type __SHOULD_NOT_USE__QueryProjectBaseColorsArgs = {
  after?: InputMaybe<Scalars['Cursor']>
  before?: InputMaybe<Scalars['Cursor']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  where?: InputMaybe<__SHOULD_NOT_USE__ProjectBaseColorWhereInput>
}

export type __SHOULD_NOT_USE__QueryProjectLightColorArgs = {
  where?: InputMaybe<__SHOULD_NOT_USE__ProjectLightColorWhereInput>
}

export type __SHOULD_NOT_USE__QueryProjectLightColorsArgs = {
  after?: InputMaybe<Scalars['Cursor']>
  before?: InputMaybe<Scalars['Cursor']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  where?: InputMaybe<__SHOULD_NOT_USE__ProjectLightColorWhereInput>
}

export type __SHOULD_NOT_USE__QueryProjectTeammateArgs = {
  where?: InputMaybe<__SHOULD_NOT_USE__ProjectTeammateWhereInput>
}

export type __SHOULD_NOT_USE__QueryProjectTeammatesArgs = {
  after?: InputMaybe<Scalars['Cursor']>
  before?: InputMaybe<Scalars['Cursor']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  where?: InputMaybe<__SHOULD_NOT_USE__ProjectTeammateWhereInput>
}

export type __SHOULD_NOT_USE__QueryProjectsArgs = {
  after?: InputMaybe<Scalars['Cursor']>
  before?: InputMaybe<Scalars['Cursor']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  where?: InputMaybe<__SHOULD_NOT_USE__ProjectWhereInput>
}

export type __SHOULD_NOT_USE__QueryTeammateArgs = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__QueryTeammatesArgs = {
  after?: InputMaybe<Scalars['Cursor']>
  before?: InputMaybe<Scalars['Cursor']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  where?: InputMaybe<__SHOULD_NOT_USE__TeammateWhereInput>
}

export type __SHOULD_NOT_USE__QueryTestTodoArgs = {
  id?: InputMaybe<Scalars['ID']>
}

export type __SHOULD_NOT_USE__QueryTestUserArgs = {
  age?: InputMaybe<Scalars['Int']>
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__QueryTestUsersArgs = {
  after?: InputMaybe<Scalars['Cursor']>
  before?: InputMaybe<Scalars['Cursor']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  where?: InputMaybe<__SHOULD_NOT_USE__TestUserWhereInput>
}

export type __SHOULD_NOT_USE__QueryWorkspaceArgs = {
  where?: InputMaybe<__SHOULD_NOT_USE__WorkspaceWhereInput>
}

export type __SHOULD_NOT_USE__QueryWorkspacesArgs = {
  after?: InputMaybe<Scalars['Cursor']>
  before?: InputMaybe<Scalars['Cursor']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  where?: InputMaybe<__SHOULD_NOT_USE__WorkspaceWhereInput>
}

export type __SHOULD_NOT_USE__Subscription = {
  colorUpdated: __SHOULD_NOT_USE__Color
  iconUpdated: __SHOULD_NOT_USE__Icon
  projectBaseColorUpdated: __SHOULD_NOT_USE__ProjectBaseColor
  projectLightColorUpdated: __SHOULD_NOT_USE__ProjectLightColor
  projectTeammateUpdated: __SHOULD_NOT_USE__ProjectTeammate
  projectUpdated: __SHOULD_NOT_USE__Project
  teammateUpdated: __SHOULD_NOT_USE__Teammate
  testUserUpdated: __SHOULD_NOT_USE__TestUser
  workspaceUpdated: __SHOULD_NOT_USE__Workspace
}

export type __SHOULD_NOT_USE__SubscriptionColorUpdatedArgs = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__SubscriptionIconUpdatedArgs = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__SubscriptionProjectBaseColorUpdatedArgs = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__SubscriptionProjectLightColorUpdatedArgs = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__SubscriptionProjectTeammateUpdatedArgs = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__SubscriptionProjectUpdatedArgs = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__SubscriptionTeammateUpdatedArgs = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__SubscriptionTestUserUpdatedArgs = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__SubscriptionWorkspaceUpdatedArgs = {
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__Teammate = __SHOULD_NOT_USE__Node & {
  createdAt: Scalars['String']
  email: Scalars['String']
  id: Scalars['ID']
  image: Scalars['String']
  name: Scalars['String']
  updatedAt: Scalars['String']
}

export type __SHOULD_NOT_USE__TeammateConnection = {
  edges: Maybe<Array<Maybe<__SHOULD_NOT_USE__TeammateEdge>>>
  pageInfo: __SHOULD_NOT_USE__PageInfo
  totalCount: Scalars['Int']
}

export type __SHOULD_NOT_USE__TeammateEdge = {
  cursor: Scalars['Cursor']
  node: Maybe<__SHOULD_NOT_USE__Teammate>
}

/**
 * TeammateWhereInput is used for filtering Teammate objects.
 * Input was generated by ent.
 */
export type __SHOULD_NOT_USE__TeammateWhereInput = {
  and?: InputMaybe<Array<__SHOULD_NOT_USE__TeammateWhereInput>>
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>
  createdAtGT?: InputMaybe<Scalars['Time']>
  createdAtGTE?: InputMaybe<Scalars['Time']>
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>
  createdAtLT?: InputMaybe<Scalars['Time']>
  createdAtLTE?: InputMaybe<Scalars['Time']>
  createdAtNEQ?: InputMaybe<Scalars['Time']>
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>
  /** email field predicates */
  email?: InputMaybe<Scalars['String']>
  emailContains?: InputMaybe<Scalars['String']>
  emailContainsFold?: InputMaybe<Scalars['String']>
  emailEqualFold?: InputMaybe<Scalars['String']>
  emailGT?: InputMaybe<Scalars['String']>
  emailGTE?: InputMaybe<Scalars['String']>
  emailHasPrefix?: InputMaybe<Scalars['String']>
  emailHasSuffix?: InputMaybe<Scalars['String']>
  emailIn?: InputMaybe<Array<Scalars['String']>>
  emailLT?: InputMaybe<Scalars['String']>
  emailLTE?: InputMaybe<Scalars['String']>
  emailNEQ?: InputMaybe<Scalars['String']>
  emailNotIn?: InputMaybe<Array<Scalars['String']>>
  /** project_teammates edge predicates */
  hasProjectTeammates?: InputMaybe<Scalars['Boolean']>
  hasProjectTeammatesWith?: InputMaybe<
    Array<__SHOULD_NOT_USE__ProjectTeammateWhereInput>
  >
  /** projects edge predicates */
  hasProjects?: InputMaybe<Scalars['Boolean']>
  hasProjectsWith?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectWhereInput>>
  /** workspaces edge predicates */
  hasWorkspaces?: InputMaybe<Scalars['Boolean']>
  hasWorkspacesWith?: InputMaybe<Array<__SHOULD_NOT_USE__WorkspaceWhereInput>>
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>
  idGT?: InputMaybe<Scalars['ID']>
  idGTE?: InputMaybe<Scalars['ID']>
  idIn?: InputMaybe<Array<Scalars['ID']>>
  idLT?: InputMaybe<Scalars['ID']>
  idLTE?: InputMaybe<Scalars['ID']>
  idNEQ?: InputMaybe<Scalars['ID']>
  idNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** image field predicates */
  image?: InputMaybe<Scalars['String']>
  imageContains?: InputMaybe<Scalars['String']>
  imageContainsFold?: InputMaybe<Scalars['String']>
  imageEqualFold?: InputMaybe<Scalars['String']>
  imageGT?: InputMaybe<Scalars['String']>
  imageGTE?: InputMaybe<Scalars['String']>
  imageHasPrefix?: InputMaybe<Scalars['String']>
  imageHasSuffix?: InputMaybe<Scalars['String']>
  imageIn?: InputMaybe<Array<Scalars['String']>>
  imageLT?: InputMaybe<Scalars['String']>
  imageLTE?: InputMaybe<Scalars['String']>
  imageNEQ?: InputMaybe<Scalars['String']>
  imageNotIn?: InputMaybe<Array<Scalars['String']>>
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>
  nameContains?: InputMaybe<Scalars['String']>
  nameContainsFold?: InputMaybe<Scalars['String']>
  nameEqualFold?: InputMaybe<Scalars['String']>
  nameGT?: InputMaybe<Scalars['String']>
  nameGTE?: InputMaybe<Scalars['String']>
  nameHasPrefix?: InputMaybe<Scalars['String']>
  nameHasSuffix?: InputMaybe<Scalars['String']>
  nameIn?: InputMaybe<Array<Scalars['String']>>
  nameLT?: InputMaybe<Scalars['String']>
  nameLTE?: InputMaybe<Scalars['String']>
  nameNEQ?: InputMaybe<Scalars['String']>
  nameNotIn?: InputMaybe<Array<Scalars['String']>>
  not?: InputMaybe<__SHOULD_NOT_USE__TeammateWhereInput>
  or?: InputMaybe<Array<__SHOULD_NOT_USE__TeammateWhereInput>>
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>
  updatedAtGT?: InputMaybe<Scalars['Time']>
  updatedAtGTE?: InputMaybe<Scalars['Time']>
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>
  updatedAtLT?: InputMaybe<Scalars['Time']>
  updatedAtLTE?: InputMaybe<Scalars['Time']>
  updatedAtNEQ?: InputMaybe<Scalars['Time']>
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>
}

export type __SHOULD_NOT_USE__TestTodo = {
  createdAt: Scalars['String']
  id: Scalars['ID']
  name: Scalars['String']
  priority: Scalars['Int']
  status: TestTodoStatus
  testUserID: Maybe<Scalars['ID']>
  updatedAt: Scalars['String']
}

export const TestTodoStatus = {
  Completed: 'COMPLETED',
  InProgress: 'IN_PROGRESS',
} as const

export type TestTodoStatus = typeof TestTodoStatus[keyof typeof TestTodoStatus]
/**
 * TestTodoWhereInput is used for filtering TestTodo objects.
 * Input was generated by ent.
 */
export type __SHOULD_NOT_USE__TestTodoWhereInput = {
  and?: InputMaybe<Array<__SHOULD_NOT_USE__TestTodoWhereInput>>
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>
  createdAtGT?: InputMaybe<Scalars['Time']>
  createdAtGTE?: InputMaybe<Scalars['Time']>
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>
  createdAtLT?: InputMaybe<Scalars['Time']>
  createdAtLTE?: InputMaybe<Scalars['Time']>
  createdAtNEQ?: InputMaybe<Scalars['Time']>
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>
  /** test_user edge predicates */
  hasTestUser?: InputMaybe<Scalars['Boolean']>
  hasTestUserWith?: InputMaybe<Array<__SHOULD_NOT_USE__TestUserWhereInput>>
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>
  idGT?: InputMaybe<Scalars['ID']>
  idGTE?: InputMaybe<Scalars['ID']>
  idIn?: InputMaybe<Array<Scalars['ID']>>
  idLT?: InputMaybe<Scalars['ID']>
  idLTE?: InputMaybe<Scalars['ID']>
  idNEQ?: InputMaybe<Scalars['ID']>
  idNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>
  nameContains?: InputMaybe<Scalars['String']>
  nameContainsFold?: InputMaybe<Scalars['String']>
  nameEqualFold?: InputMaybe<Scalars['String']>
  nameGT?: InputMaybe<Scalars['String']>
  nameGTE?: InputMaybe<Scalars['String']>
  nameHasPrefix?: InputMaybe<Scalars['String']>
  nameHasSuffix?: InputMaybe<Scalars['String']>
  nameIn?: InputMaybe<Array<Scalars['String']>>
  nameLT?: InputMaybe<Scalars['String']>
  nameLTE?: InputMaybe<Scalars['String']>
  nameNEQ?: InputMaybe<Scalars['String']>
  nameNotIn?: InputMaybe<Array<Scalars['String']>>
  not?: InputMaybe<__SHOULD_NOT_USE__TestTodoWhereInput>
  or?: InputMaybe<Array<__SHOULD_NOT_USE__TestTodoWhereInput>>
  /** priority field predicates */
  priority?: InputMaybe<Scalars['Int']>
  priorityGT?: InputMaybe<Scalars['Int']>
  priorityGTE?: InputMaybe<Scalars['Int']>
  priorityIn?: InputMaybe<Array<Scalars['Int']>>
  priorityLT?: InputMaybe<Scalars['Int']>
  priorityLTE?: InputMaybe<Scalars['Int']>
  priorityNEQ?: InputMaybe<Scalars['Int']>
  priorityNotIn?: InputMaybe<Array<Scalars['Int']>>
  /** status field predicates */
  status?: InputMaybe<TestTodoStatus>
  statusIn?: InputMaybe<Array<TestTodoStatus>>
  statusNEQ?: InputMaybe<TestTodoStatus>
  statusNotIn?: InputMaybe<Array<TestTodoStatus>>
  /** test_user_id field predicates */
  testUserID?: InputMaybe<Scalars['ID']>
  testUserIDContains?: InputMaybe<Scalars['ID']>
  testUserIDContainsFold?: InputMaybe<Scalars['ID']>
  testUserIDEqualFold?: InputMaybe<Scalars['ID']>
  testUserIDGT?: InputMaybe<Scalars['ID']>
  testUserIDGTE?: InputMaybe<Scalars['ID']>
  testUserIDHasPrefix?: InputMaybe<Scalars['ID']>
  testUserIDHasSuffix?: InputMaybe<Scalars['ID']>
  testUserIDIn?: InputMaybe<Array<Scalars['ID']>>
  testUserIDIsNil?: InputMaybe<Scalars['Boolean']>
  testUserIDLT?: InputMaybe<Scalars['ID']>
  testUserIDLTE?: InputMaybe<Scalars['ID']>
  testUserIDNEQ?: InputMaybe<Scalars['ID']>
  testUserIDNotIn?: InputMaybe<Array<Scalars['ID']>>
  testUserIDNotNil?: InputMaybe<Scalars['Boolean']>
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>
  updatedAtGT?: InputMaybe<Scalars['Time']>
  updatedAtGTE?: InputMaybe<Scalars['Time']>
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>
  updatedAtLT?: InputMaybe<Scalars['Time']>
  updatedAtLTE?: InputMaybe<Scalars['Time']>
  updatedAtNEQ?: InputMaybe<Scalars['Time']>
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>
}

export type __SHOULD_NOT_USE__TestUser = __SHOULD_NOT_USE__Node & {
  age: Scalars['Int']
  createdAt: Scalars['String']
  id: Scalars['ID']
  name: Scalars['String']
  profile: __SHOULD_NOT_USE__TestUserProfile
  testTodos: Array<__SHOULD_NOT_USE__TestTodo>
  updatedAt: Scalars['String']
}

export type __SHOULD_NOT_USE__TestUserConnection = {
  edges: Maybe<Array<Maybe<__SHOULD_NOT_USE__TestUserEdge>>>
  pageInfo: __SHOULD_NOT_USE__PageInfo
  totalCount: Scalars['Int']
}

export type __SHOULD_NOT_USE__TestUserEdge = {
  cursor: Scalars['Cursor']
  node: Maybe<__SHOULD_NOT_USE__TestUser>
}

export type __SHOULD_NOT_USE__TestUserProfile = {
  address: Maybe<Scalars['String']>
  body: Maybe<__SHOULD_NOT_USE__TestUserProfileBody>
  phone: Maybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__TestUserProfileBody = {
  comment: Maybe<__SHOULD_NOT_USE__TestUserProfileBodyComment>
  height: Maybe<Scalars['Int']>
  weight: Maybe<Scalars['Int']>
}

export type __SHOULD_NOT_USE__TestUserProfileBodyComment = {
  text: Maybe<Scalars['String']>
  type: Maybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__TestUserProfileBodyCommentInput = {
  text?: InputMaybe<Scalars['String']>
  type?: InputMaybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__TestUserProfileBodyInput = {
  comment?: InputMaybe<__SHOULD_NOT_USE__TestUserProfileBodyCommentInput>
  height?: InputMaybe<Scalars['Int']>
  weight?: InputMaybe<Scalars['Int']>
}

export type __SHOULD_NOT_USE__TestUserProfileInput = {
  address?: InputMaybe<Scalars['String']>
  body?: InputMaybe<__SHOULD_NOT_USE__TestUserProfileBodyInput>
  phone?: InputMaybe<Scalars['String']>
}

/**
 * TestUserWhereInput is used for filtering TestUser objects.
 * Input was generated by ent.
 */
export type __SHOULD_NOT_USE__TestUserWhereInput = {
  /** age field predicates */
  age?: InputMaybe<Scalars['Int']>
  ageGT?: InputMaybe<Scalars['Int']>
  ageGTE?: InputMaybe<Scalars['Int']>
  ageIn?: InputMaybe<Array<Scalars['Int']>>
  ageLT?: InputMaybe<Scalars['Int']>
  ageLTE?: InputMaybe<Scalars['Int']>
  ageNEQ?: InputMaybe<Scalars['Int']>
  ageNotIn?: InputMaybe<Array<Scalars['Int']>>
  and?: InputMaybe<Array<__SHOULD_NOT_USE__TestUserWhereInput>>
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>
  createdAtGT?: InputMaybe<Scalars['Time']>
  createdAtGTE?: InputMaybe<Scalars['Time']>
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>
  createdAtLT?: InputMaybe<Scalars['Time']>
  createdAtLTE?: InputMaybe<Scalars['Time']>
  createdAtNEQ?: InputMaybe<Scalars['Time']>
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>
  /** test_todos edge predicates */
  hasTestTodos?: InputMaybe<Scalars['Boolean']>
  hasTestTodosWith?: InputMaybe<Array<__SHOULD_NOT_USE__TestTodoWhereInput>>
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>
  idGT?: InputMaybe<Scalars['ID']>
  idGTE?: InputMaybe<Scalars['ID']>
  idIn?: InputMaybe<Array<Scalars['ID']>>
  idLT?: InputMaybe<Scalars['ID']>
  idLTE?: InputMaybe<Scalars['ID']>
  idNEQ?: InputMaybe<Scalars['ID']>
  idNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>
  nameContains?: InputMaybe<Scalars['String']>
  nameContainsFold?: InputMaybe<Scalars['String']>
  nameEqualFold?: InputMaybe<Scalars['String']>
  nameGT?: InputMaybe<Scalars['String']>
  nameGTE?: InputMaybe<Scalars['String']>
  nameHasPrefix?: InputMaybe<Scalars['String']>
  nameHasSuffix?: InputMaybe<Scalars['String']>
  nameIn?: InputMaybe<Array<Scalars['String']>>
  nameLT?: InputMaybe<Scalars['String']>
  nameLTE?: InputMaybe<Scalars['String']>
  nameNEQ?: InputMaybe<Scalars['String']>
  nameNotIn?: InputMaybe<Array<Scalars['String']>>
  not?: InputMaybe<__SHOULD_NOT_USE__TestUserWhereInput>
  or?: InputMaybe<Array<__SHOULD_NOT_USE__TestUserWhereInput>>
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>
  updatedAtGT?: InputMaybe<Scalars['Time']>
  updatedAtGTE?: InputMaybe<Scalars['Time']>
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>
  updatedAtLT?: InputMaybe<Scalars['Time']>
  updatedAtLTE?: InputMaybe<Scalars['Time']>
  updatedAtNEQ?: InputMaybe<Scalars['Time']>
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>
}

export type __SHOULD_NOT_USE__UpdateColorInput = {
  color?: InputMaybe<Scalars['String']>
  hex?: InputMaybe<Scalars['String']>
  id: Scalars['ID']
  name?: InputMaybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__UpdateIconInput = {
  icon?: InputMaybe<Scalars['String']>
  id: Scalars['ID']
  name?: InputMaybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__UpdateProjectBaseColorInput = {
  colorId?: InputMaybe<Scalars['ID']>
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__UpdateProjectInput = {
  createdBy?: InputMaybe<Scalars['ID']>
  description?: InputMaybe<__SHOULD_NOT_USE__EditorDescriptionInput>
  descriptionTitle?: InputMaybe<Scalars['String']>
  dueDate?: InputMaybe<Scalars['Time']>
  iconId?: InputMaybe<Scalars['ID']>
  id: Scalars['ID']
  name?: InputMaybe<Scalars['String']>
  projectBaseColorId?: InputMaybe<Scalars['ID']>
  projectLightColorId?: InputMaybe<Scalars['ID']>
}

export type __SHOULD_NOT_USE__UpdateProjectLightColorInput = {
  colorId?: InputMaybe<Scalars['ID']>
  id: Scalars['ID']
}

export type __SHOULD_NOT_USE__UpdateProjectTeammateInput = {
  id: Scalars['ID']
  isOwner?: InputMaybe<Scalars['Boolean']>
  projectId?: InputMaybe<Scalars['ID']>
  role?: InputMaybe<Scalars['String']>
  teammateId?: InputMaybe<Scalars['ID']>
}

export type __SHOULD_NOT_USE__UpdateTeammateInput = {
  email?: InputMaybe<Scalars['String']>
  id: Scalars['ID']
  image?: InputMaybe<Scalars['String']>
  name?: InputMaybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__UpdateTestTodoInput = {
  id: Scalars['ID']
  name?: InputMaybe<Scalars['String']>
  priority?: InputMaybe<Scalars['Int']>
  status?: InputMaybe<TestTodoStatus>
  testUserID?: InputMaybe<Scalars['ID']>
}

export type __SHOULD_NOT_USE__UpdateTestUserInput = {
  age?: InputMaybe<Scalars['Int']>
  id: Scalars['ID']
  name?: InputMaybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__UpdateWorkspaceInput = {
  createdBy?: InputMaybe<Scalars['ID']>
  description?: InputMaybe<__SHOULD_NOT_USE__EditorDescriptionInput>
  id: Scalars['ID']
  name?: InputMaybe<Scalars['String']>
}

export type __SHOULD_NOT_USE__Workspace = __SHOULD_NOT_USE__Node & {
  createdAt: Scalars['String']
  createdBy: Scalars['ID']
  description: __SHOULD_NOT_USE__EditorDescription
  id: Scalars['ID']
  name: Scalars['String']
  updatedAt: Scalars['String']
}

export type __SHOULD_NOT_USE__WorkspaceConnection = {
  edges: Maybe<Array<Maybe<__SHOULD_NOT_USE__WorkspaceEdge>>>
  pageInfo: __SHOULD_NOT_USE__PageInfo
  totalCount: Scalars['Int']
}

export type __SHOULD_NOT_USE__WorkspaceEdge = {
  cursor: Scalars['Cursor']
  node: Maybe<__SHOULD_NOT_USE__Workspace>
}

/**
 * WorkspaceWhereInput is used for filtering Workspace objects.
 * Input was generated by ent.
 */
export type __SHOULD_NOT_USE__WorkspaceWhereInput = {
  and?: InputMaybe<Array<__SHOULD_NOT_USE__WorkspaceWhereInput>>
  /** created_at field predicates */
  createdAt?: InputMaybe<Scalars['Time']>
  createdAtGT?: InputMaybe<Scalars['Time']>
  createdAtGTE?: InputMaybe<Scalars['Time']>
  createdAtIn?: InputMaybe<Array<Scalars['Time']>>
  createdAtLT?: InputMaybe<Scalars['Time']>
  createdAtLTE?: InputMaybe<Scalars['Time']>
  createdAtNEQ?: InputMaybe<Scalars['Time']>
  createdAtNotIn?: InputMaybe<Array<Scalars['Time']>>
  /** created_by field predicates */
  createdBy?: InputMaybe<Scalars['ID']>
  createdByContains?: InputMaybe<Scalars['ID']>
  createdByContainsFold?: InputMaybe<Scalars['ID']>
  createdByEqualFold?: InputMaybe<Scalars['ID']>
  createdByGT?: InputMaybe<Scalars['ID']>
  createdByGTE?: InputMaybe<Scalars['ID']>
  createdByHasPrefix?: InputMaybe<Scalars['ID']>
  createdByHasSuffix?: InputMaybe<Scalars['ID']>
  createdByIn?: InputMaybe<Array<Scalars['ID']>>
  createdByLT?: InputMaybe<Scalars['ID']>
  createdByLTE?: InputMaybe<Scalars['ID']>
  createdByNEQ?: InputMaybe<Scalars['ID']>
  createdByNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** projects edge predicates */
  hasProjects?: InputMaybe<Scalars['Boolean']>
  hasProjectsWith?: InputMaybe<Array<__SHOULD_NOT_USE__ProjectWhereInput>>
  /** teammate edge predicates */
  hasTeammate?: InputMaybe<Scalars['Boolean']>
  hasTeammateWith?: InputMaybe<Array<__SHOULD_NOT_USE__TeammateWhereInput>>
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']>
  idGT?: InputMaybe<Scalars['ID']>
  idGTE?: InputMaybe<Scalars['ID']>
  idIn?: InputMaybe<Array<Scalars['ID']>>
  idLT?: InputMaybe<Scalars['ID']>
  idLTE?: InputMaybe<Scalars['ID']>
  idNEQ?: InputMaybe<Scalars['ID']>
  idNotIn?: InputMaybe<Array<Scalars['ID']>>
  /** name field predicates */
  name?: InputMaybe<Scalars['String']>
  nameContains?: InputMaybe<Scalars['String']>
  nameContainsFold?: InputMaybe<Scalars['String']>
  nameEqualFold?: InputMaybe<Scalars['String']>
  nameGT?: InputMaybe<Scalars['String']>
  nameGTE?: InputMaybe<Scalars['String']>
  nameHasPrefix?: InputMaybe<Scalars['String']>
  nameHasSuffix?: InputMaybe<Scalars['String']>
  nameIn?: InputMaybe<Array<Scalars['String']>>
  nameLT?: InputMaybe<Scalars['String']>
  nameLTE?: InputMaybe<Scalars['String']>
  nameNEQ?: InputMaybe<Scalars['String']>
  nameNotIn?: InputMaybe<Array<Scalars['String']>>
  not?: InputMaybe<__SHOULD_NOT_USE__WorkspaceWhereInput>
  or?: InputMaybe<Array<__SHOULD_NOT_USE__WorkspaceWhereInput>>
  /** updated_at field predicates */
  updatedAt?: InputMaybe<Scalars['Time']>
  updatedAtGT?: InputMaybe<Scalars['Time']>
  updatedAtGTE?: InputMaybe<Scalars['Time']>
  updatedAtIn?: InputMaybe<Array<Scalars['Time']>>
  updatedAtLT?: InputMaybe<Scalars['Time']>
  updatedAtLTE?: InputMaybe<Scalars['Time']>
  updatedAtNEQ?: InputMaybe<Scalars['Time']>
  updatedAtNotIn?: InputMaybe<Array<Scalars['Time']>>
}
