# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Node {
  id: ID!
}

type Mutation {
  createTestTodo(input: CreateTestTodoInput!): TestTodo!
  createTestUser(input: CreateTestUserInput!): TestUser!
  createTestUserAndTodo(input: CreateTestUserInput!): TestUser!
  updateTestTodo(input: UpdateTestTodoInput!): TestTodo!
  updateTestUser(input: UpdateTestUserInput!): TestUser!
}

type PageInfo {
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  testTodo(id: ID): TestTodo
  testTodos: [TestTodo!]!
  testUser(age: Int, id: ID!): TestUser
  testUsers(after: Cursor, before: Cursor, first: Int, last: Int, where: TestUserWhereInput): TestUserConnection
}

type Subscription {
  testUserUpdated(id: ID!): TestUser!
}

type TestTodo {
  createdAt: String!
  id: ID!
  name: String!
  priority: Int!
  status: TestTodoStatus!
  testUserID: ID
  updatedAt: String!
}

type TestUser implements Node {
  age: Int!
  createdAt: String!
  id: ID!
  name: String!
  testTodos: [TestTodo!]!
  updatedAt: String!
}

type TestUserConnection {
  edges: [TestUserEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type TestUserEdge {
  cursor: Cursor!
  node: TestUser
}

enum TestTodoStatus {
  COMPLETED
  IN_PROGRESS
}

input CreateTestTodoInput {
  name: String!
  priority: Int!
  status: TestTodoStatus = IN_PROGRESS
  testUserID: ID!
}

input CreateTestUserInput {
  age: Int!
  name: String!
}

"""

TestTodoWhereInput is used for filtering TestTodo objects.
Input was generated by ent.
"""
input TestTodoWhereInput {
  and: [TestTodoWhereInput!]
  "created_at field predicates"
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  "test_user edge predicates"
  hasTestUser: Boolean
  hasTestUserWith: [TestUserWhereInput!]
  "id field predicates"
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  "name field predicates"
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: TestTodoWhereInput
  or: [TestTodoWhereInput!]
  "priority field predicates"
  priority: Int
  priorityGT: Int
  priorityGTE: Int
  priorityIn: [Int!]
  priorityLT: Int
  priorityLTE: Int
  priorityNEQ: Int
  priorityNotIn: [Int!]
  "status field predicates"
  status: TestTodoStatus
  statusIn: [TestTodoStatus!]
  statusNEQ: TestTodoStatus
  statusNotIn: [TestTodoStatus!]
  "test_user_id field predicates"
  testUserID: ID
  testUserIDContains: ID
  testUserIDContainsFold: ID
  testUserIDEqualFold: ID
  testUserIDGT: ID
  testUserIDGTE: ID
  testUserIDHasPrefix: ID
  testUserIDHasSuffix: ID
  testUserIDIn: [ID!]
  testUserIDIsNil: Boolean
  testUserIDLT: ID
  testUserIDLTE: ID
  testUserIDNEQ: ID
  testUserIDNotIn: [ID!]
  testUserIDNotNil: Boolean
  "updated_at field predicates"
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""

TestUserWhereInput is used for filtering TestUser objects.
Input was generated by ent.
"""
input TestUserWhereInput {
  "age field predicates"
  age: Int
  ageGT: Int
  ageGTE: Int
  ageIn: [Int!]
  ageLT: Int
  ageLTE: Int
  ageNEQ: Int
  ageNotIn: [Int!]
  and: [TestUserWhereInput!]
  "created_at field predicates"
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  "test_todos edge predicates"
  hasTestTodos: Boolean
  hasTestTodosWith: [TestTodoWhereInput!]
  "id field predicates"
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  "name field predicates"
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: TestUserWhereInput
  or: [TestUserWhereInput!]
  "updated_at field predicates"
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

input UpdateTestTodoInput {
  id: ID!
  name: String
  priority: Int
  status: TestTodoStatus
  testUserID: ID
}

input UpdateTestUserInput {
  age: Int
  id: ID!
  name: String
}


scalar Cursor

scalar Time
