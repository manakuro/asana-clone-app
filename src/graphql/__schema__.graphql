# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Node {
  id: ID!
}

type EditorDescription {
  content: [EditorDescriptionContent]!
  type: String
}

type EditorDescriptionContent {
  content: [EditorDescriptionContentContent]!
  type: String
}

type EditorDescriptionContentContent {
  attrs: EditorDescriptionContentContentAttrs
  text: String
  type: String
}

type EditorDescriptionContentContentAttrs {
  mentionId: String
  mentionType: String
}

type Mutation {
  createTeammate(input: CreateTeammateInput!): Teammate!
  createTestTodo(input: CreateTestTodoInput!): TestTodo!
  createTestUser(input: CreateTestUserInput!): TestUser!
  createTestUserAndTodo(input: CreateTestUserInput!): TestUser!
  createWorkspace(input: CreateWorkspaceInput!): Workspace!
  updateTeammate(input: UpdateTeammateInput!): Teammate!
  updateTestTodo(input: UpdateTestTodoInput!): TestTodo!
  updateTestUser(input: UpdateTestUserInput!): TestUser!
  updateWorkspace(input: UpdateWorkspaceInput!): Workspace!
}

type PageInfo {
  endCursor: Cursor
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  teammate(id: ID!): Teammate
  teammates(after: Cursor, before: Cursor, first: Int, last: Int, where: TeammateWhereInput): TeammateConnection
  testTodo(id: ID): TestTodo
  testTodos: [TestTodo!]!
  testUser(age: Int, id: ID!): TestUser
  testUsers(after: Cursor, before: Cursor, first: Int, last: Int, where: TestUserWhereInput): TestUserConnection
  workspace(where: WorkspaceWhereInput): Workspace
  workspaces(after: Cursor, before: Cursor, first: Int, last: Int, where: WorkspaceWhereInput): WorkspaceConnection
}

type Subscription {
  teammateUpdated(id: ID!): Teammate!
  testUserUpdated(id: ID!): TestUser!
  workspaceUpdated(id: ID!): Workspace!
}

type Teammate implements Node {
  createdAt: String!
  email: String!
  id: ID!
  image: String!
  name: String!
  updatedAt: String!
}

type TeammateConnection {
  edges: [TeammateEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type TeammateEdge {
  cursor: Cursor!
  node: Teammate
}

type TestTodo {
  createdAt: String!
  id: ID!
  name: String!
  priority: Int!
  status: TestTodoStatus!
  testUserID: ID
  updatedAt: String!
}

type TestUser implements Node {
  age: Int!
  createdAt: String!
  id: ID!
  name: String!
  profile: TestUserProfile!
  testTodos: [TestTodo!]!
  updatedAt: String!
}

type TestUserConnection {
  edges: [TestUserEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type TestUserEdge {
  cursor: Cursor!
  node: TestUser
}

type TestUserProfile {
  address: String
  body: TestUserProfileBody
  phone: String
}

type TestUserProfileBody {
  comment: TestUserProfileBodyComment
  height: Int
  weight: Int
}

type TestUserProfileBodyComment {
  text: String
  type: String
}

type Workspace implements Node {
  createdAt: String!
  createdBy: ID!
  description: EditorDescription!
  id: ID!
  name: String!
  updatedAt: String!
}

type WorkspaceConnection {
  edges: [WorkspaceEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type WorkspaceEdge {
  cursor: Cursor!
  node: Workspace
}

enum TestTodoStatus {
  COMPLETED
  IN_PROGRESS
}

input CreateTeammateInput {
  email: String!
  image: String!
  name: String!
}

input CreateTestTodoInput {
  name: String!
  priority: Int!
  status: TestTodoStatus = IN_PROGRESS
  testUserID: ID!
}

input CreateTestUserInput {
  age: Int!
  name: String!
  profile: TestUserProfileInput!
}

input CreateWorkspaceInput {
  createdBy: ID!
  description: EditorDescriptionInput
  name: String!
}

input EditorDescriptionContentContentAttrsInput {
  mentionId: String
  mentionType: String
}

input EditorDescriptionContentContentInput {
  attrs: EditorDescriptionContentContentAttrsInput
  text: String
  type: String
}

input EditorDescriptionContentInput {
  content: [EditorDescriptionContentContentInput]!
  type: String
}

input EditorDescriptionInput {
  content: [EditorDescriptionContentInput]!
  type: String
}

"""

TeammateWhereInput is used for filtering Teammate objects.
Input was generated by ent.
"""
input TeammateWhereInput {
  and: [TeammateWhereInput!]
  "created_at field predicates"
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  "email field predicates"
  email: String
  emailContains: String
  emailContainsFold: String
  emailEqualFold: String
  emailGT: String
  emailGTE: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIn: [String!]
  emailLT: String
  emailLTE: String
  emailNEQ: String
  emailNotIn: [String!]
  "workspaces edge predicates"
  hasWorkspaces: Boolean
  hasWorkspacesWith: [WorkspaceWhereInput!]
  "id field predicates"
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  "image field predicates"
  image: String
  imageContains: String
  imageContainsFold: String
  imageEqualFold: String
  imageGT: String
  imageGTE: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIn: [String!]
  imageLT: String
  imageLTE: String
  imageNEQ: String
  imageNotIn: [String!]
  "name field predicates"
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: TeammateWhereInput
  or: [TeammateWhereInput!]
  "updated_at field predicates"
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

"""

TestTodoWhereInput is used for filtering TestTodo objects.
Input was generated by ent.
"""
input TestTodoWhereInput {
  and: [TestTodoWhereInput!]
  "created_at field predicates"
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  "test_user edge predicates"
  hasTestUser: Boolean
  hasTestUserWith: [TestUserWhereInput!]
  "id field predicates"
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  "name field predicates"
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: TestTodoWhereInput
  or: [TestTodoWhereInput!]
  "priority field predicates"
  priority: Int
  priorityGT: Int
  priorityGTE: Int
  priorityIn: [Int!]
  priorityLT: Int
  priorityLTE: Int
  priorityNEQ: Int
  priorityNotIn: [Int!]
  "status field predicates"
  status: TestTodoStatus
  statusIn: [TestTodoStatus!]
  statusNEQ: TestTodoStatus
  statusNotIn: [TestTodoStatus!]
  "test_user_id field predicates"
  testUserID: ID
  testUserIDContains: ID
  testUserIDContainsFold: ID
  testUserIDEqualFold: ID
  testUserIDGT: ID
  testUserIDGTE: ID
  testUserIDHasPrefix: ID
  testUserIDHasSuffix: ID
  testUserIDIn: [ID!]
  testUserIDIsNil: Boolean
  testUserIDLT: ID
  testUserIDLTE: ID
  testUserIDNEQ: ID
  testUserIDNotIn: [ID!]
  testUserIDNotNil: Boolean
  "updated_at field predicates"
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

input TestUserProfileBodyCommentInput {
  text: String
  type: String
}

input TestUserProfileBodyInput {
  comment: TestUserProfileBodyCommentInput
  height: Int
  weight: Int
}

input TestUserProfileInput {
  address: String
  body: TestUserProfileBodyInput
  phone: String
}

"""

TestUserWhereInput is used for filtering TestUser objects.
Input was generated by ent.
"""
input TestUserWhereInput {
  "age field predicates"
  age: Int
  ageGT: Int
  ageGTE: Int
  ageIn: [Int!]
  ageLT: Int
  ageLTE: Int
  ageNEQ: Int
  ageNotIn: [Int!]
  and: [TestUserWhereInput!]
  "created_at field predicates"
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  "test_todos edge predicates"
  hasTestTodos: Boolean
  hasTestTodosWith: [TestTodoWhereInput!]
  "id field predicates"
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  "name field predicates"
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: TestUserWhereInput
  or: [TestUserWhereInput!]
  "updated_at field predicates"
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}

input UpdateTeammateInput {
  email: String
  id: ID!
  image: String
  name: String
}

input UpdateTestTodoInput {
  id: ID!
  name: String
  priority: Int
  status: TestTodoStatus
  testUserID: ID
}

input UpdateTestUserInput {
  age: Int
  id: ID!
  name: String
}

input UpdateWorkspaceInput {
  createdBy: ID
  description: EditorDescriptionInput
  id: ID!
  name: String
}

"""

WorkspaceWhereInput is used for filtering Workspace objects.
Input was generated by ent.
"""
input WorkspaceWhereInput {
  and: [WorkspaceWhereInput!]
  "created_at field predicates"
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  "created_by field predicates"
  createdBy: ID
  createdByContains: ID
  createdByContainsFold: ID
  createdByEqualFold: ID
  createdByGT: ID
  createdByGTE: ID
  createdByHasPrefix: ID
  createdByHasSuffix: ID
  createdByIn: [ID!]
  createdByLT: ID
  createdByLTE: ID
  createdByNEQ: ID
  createdByNotIn: [ID!]
  "teammate edge predicates"
  hasTeammate: Boolean
  hasTeammateWith: [TeammateWhereInput!]
  "id field predicates"
  id: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  "name field predicates"
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: WorkspaceWhereInput
  or: [WorkspaceWhereInput!]
  "updated_at field predicates"
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
}


scalar Cursor

scalar Time
